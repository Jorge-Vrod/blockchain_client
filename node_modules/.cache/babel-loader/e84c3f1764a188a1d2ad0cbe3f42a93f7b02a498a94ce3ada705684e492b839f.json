{"ast":null,"code":"import EditProfileForm from \"./Profile/EditProfileForm\";\nimport UserCard from \"./Profile/UserCard\";\nimport { create } from \"kubo-rpc-client\";\nimport { ethers } from \"ethers\";\nimport { Buffer } from \"buffer\";\nexport default {\n  components: {\n    EditProfileForm,\n    UserCard\n  },\n  data() {\n    return {\n      model: {\n        company: \"Creative Code Inc.\",\n        email: \"mike@email.com\",\n        username: \"michael23\",\n        firstName: \"Mike\",\n        lastName: \"Andrew\",\n        address: \"Bld Mihail Kogalniceanu, nr. 8 Bl 1, Sc 1, Ap 09\",\n        city: \"Melbourne\",\n        country: \"Australia\",\n        about: \"Lamborghini Mercy, Your chick she so thirsty, I'm in that two seat Lambo.\"\n      },\n      user: {\n        fullName: \"Mike Andrew\",\n        title: \"Ceo/Co-Founder\",\n        description: `Do not be scared of the truth because we need to restart the human foundation in truth And I love you like Kanye loves Kanye I love Rick Owens’ bed design but the back is...`\n      },\n      ipfsHash: \"\",\n      file: null,\n      client: null,\n      ipfsContract: null,\n      ZERO_ADDRESS: \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n    };\n  },\n  mounted() {\n    this.initialize();\n    this.readCurrentUserFile();\n  },\n  methods: {\n    async initialize() {\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const defaultProvider = new ethers.providers.Web3Provider(window.ethereum);\n        this.ipfsContract = new ethers.Contract(addresses.ipfs, abis.ipfs, defaultProvider);\n      } else {\n        console.error(\"Ethereum wallet is not connected\");\n      }\n    },\n    async readCurrentUserFile() {\n      const signer = this.ipfsContract.provider.getSigner();\n      const result = await this.ipfsContract.userFiles(await signer.getAddress());\n      if (result !== this.ZERO_ADDRESS) {\n        this.ipfsHash = result;\n      }\n    },\n    async setFileIPFS(hash) {\n      const signer = this.ipfsContract.provider.getSigner();\n      const ipfsWithSigner = this.ipfsContract.connect(signer);\n      const tx = await ipfsWithSigner.setFileIPFS(hash);\n      console.log(\"Transaction: \", tx);\n      this.ipfsHash = hash;\n    },\n    async handleSubmit() {\n      try {\n        if (!this.file) {\n          console.error(\"No file selected\");\n          return;\n        }\n        this.client = await create(\"/ip4/0.0.0.0/tcp/5001\");\n\n        // Upload file to IPFS\n        const result = await this.client.add(this.file);\n\n        // Save file to the local IPFS node\n        await this.client.files.cp(`/ipfs/${result.cid}`, `/${result.cid}`);\n        console.log(\"IPFS CID:\", result.cid);\n\n        // Save the CID to Ethereum via the smart contract\n        await this.setFileIPFS(result.cid.toString());\n      } catch (error) {\n        console.error(\"Error during file upload:\", error.message);\n      }\n    },\n    retrieveFile(event) {\n      const data = event.target.files[0];\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(data);\n      reader.onloadend = () => {\n        this.file = Buffer.from(reader.result);\n      };\n    }\n  }\n};","map":{"version":3,"names":["EditProfileForm","UserCard","create","ethers","Buffer","components","data","model","company","email","username","firstName","lastName","address","city","country","about","user","fullName","title","description","ipfsHash","file","client","ipfsContract","ZERO_ADDRESS","mounted","initialize","readCurrentUserFile","methods","window","ethereum","enable","defaultProvider","providers","Web3Provider","Contract","addresses","ipfs","abis","console","error","signer","provider","getSigner","result","userFiles","getAddress","setFileIPFS","hash","ipfsWithSigner","connect","tx","log","handleSubmit","add","files","cp","cid","toString","message","retrieveFile","event","target","reader","FileReader","readAsArrayBuffer","onloadend","from"],"sources":["src/pages/Profile.vue"],"sourcesContent":["<template>\n  <div class=\"row\">\n    <div class=\"col-md-8\">\n      <edit-profile-form :model=\"model\"> </edit-profile-form>\n      <div class=\"file-upload-section mt-4\">\n        <h4>Upload File to IPFS</h4>\n        <form @submit.prevent=\"handleSubmit\">\n          <input type=\"file\" @change=\"retrieveFile\" class=\"form-control mb-3\" />\n          <button type=\"submit\" class=\"btn btn-primary\">Upload</button>\n        </form>\n        <div v-if=\"ipfsHash\" class=\"mt-3\">\n          <p><strong>IPFS Hash:</strong> {{ ipfsHash }}</p>\n          <a :href=\"'https://ipfs.io/ipfs/' + ipfsHash\" target=\"_blank\" class=\"btn btn-link\">View File</a>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-4\">\n      <user-card :user=\"user\"></user-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport EditProfileForm from \"./Profile/EditProfileForm\";\nimport UserCard from \"./Profile/UserCard\";\nimport { create } from \"kubo-rpc-client\";\nimport { ethers } from \"ethers\";\nimport { Buffer } from \"buffer\";\n\nexport default {\n  components: {\n    EditProfileForm,\n    UserCard,\n  },\n  data() {\n    return {\n      model: {\n        company: \"Creative Code Inc.\",\n        email: \"mike@email.com\",\n        username: \"michael23\",\n        firstName: \"Mike\",\n        lastName: \"Andrew\",\n        address: \"Bld Mihail Kogalniceanu, nr. 8 Bl 1, Sc 1, Ap 09\",\n        city: \"Melbourne\",\n        country: \"Australia\",\n        about:\n          \"Lamborghini Mercy, Your chick she so thirsty, I'm in that two seat Lambo.\",\n      },\n      user: {\n        fullName: \"Mike Andrew\",\n        title: \"Ceo/Co-Founder\",\n        description: `Do not be scared of the truth because we need to restart the human foundation in truth And I love you like Kanye loves Kanye I love Rick Owens’ bed design but the back is...`,\n      },\n      ipfsHash: \"\",\n      file: null,\n      client: null,\n      ipfsContract: null,\n      ZERO_ADDRESS: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    };\n  },\n  mounted() {\n    this.initialize();\n    this.readCurrentUserFile();\n  },\n  methods: {\n    async initialize() {\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const defaultProvider = new ethers.providers.Web3Provider(window.ethereum);\n        this.ipfsContract = new ethers.Contract(\n          addresses.ipfs,\n          abis.ipfs,\n          defaultProvider\n        );\n      } else {\n        console.error(\"Ethereum wallet is not connected\");\n      }\n    },\n    async readCurrentUserFile() {\n      const signer = this.ipfsContract.provider.getSigner();\n      const result = await this.ipfsContract.userFiles(await signer.getAddress());\n      if (result !== this.ZERO_ADDRESS) {\n        this.ipfsHash = result;\n      }\n    },\n    async setFileIPFS(hash) {\n      const signer = this.ipfsContract.provider.getSigner();\n      const ipfsWithSigner = this.ipfsContract.connect(signer);\n      const tx = await ipfsWithSigner.setFileIPFS(hash);\n      console.log(\"Transaction: \", tx);\n      this.ipfsHash = hash;\n    },\n    async handleSubmit() {\n      try {\n        if (!this.file) {\n          console.error(\"No file selected\");\n          return;\n        }\n        this.client = await create(\"/ip4/0.0.0.0/tcp/5001\");\n\n        // Upload file to IPFS\n        const result = await this.client.add(this.file);\n\n        // Save file to the local IPFS node\n        await this.client.files.cp(`/ipfs/${result.cid}`, `/${result.cid}`);\n\n        console.log(\"IPFS CID:\", result.cid);\n\n        // Save the CID to Ethereum via the smart contract\n        await this.setFileIPFS(result.cid.toString());\n      } catch (error) {\n        console.error(\"Error during file upload:\", error.message);\n      }\n    },\n    retrieveFile(event) {\n      const data = event.target.files[0];\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(data);\n      reader.onloadend = () => {\n        this.file = Buffer.from(reader.result);\n      };\n    },\n  },\n};\n</script>\n\n<style scoped>\n.file-upload-section {\n  background-color: #f8f9fa;\n  padding: 20px;\n  border-radius: 5px;\n}\n.file-upload-section h4 {\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":"AAuBA,OAAAA,eAAA;AACA,OAAAC,QAAA;AACA,SAAAC,MAAA;AACA,SAAAC,MAAA;AACA,SAAAC,MAAA;AAEA;EACAC,UAAA;IACAL,eAAA;IACAC;EACA;EACAK,KAAA;IACA;MACAC,KAAA;QACAC,OAAA;QACAC,KAAA;QACAC,QAAA;QACAC,SAAA;QACAC,QAAA;QACAC,OAAA;QACAC,IAAA;QACAC,OAAA;QACAC,KAAA,EACA;MACA;MACAC,IAAA;QACAC,QAAA;QACAC,KAAA;QACAC,WAAA;MACA;MACAC,QAAA;MACAC,IAAA;MACAC,MAAA;MACAC,YAAA;MACAC,YAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;IACA,KAAAC,mBAAA;EACA;EACAC,OAAA;IACA,MAAAF,WAAA;MACA,IAAAG,MAAA,CAAAC,QAAA;QACA,MAAAD,MAAA,CAAAC,QAAA,CAAAC,MAAA;QACA,MAAAC,eAAA,OAAA9B,MAAA,CAAA+B,SAAA,CAAAC,YAAA,CAAAL,MAAA,CAAAC,QAAA;QACA,KAAAP,YAAA,OAAArB,MAAA,CAAAiC,QAAA,CACAC,SAAA,CAAAC,IAAA,EACAC,IAAA,CAAAD,IAAA,EACAL,eACA;MACA;QACAO,OAAA,CAAAC,KAAA;MACA;IACA;IACA,MAAAb,oBAAA;MACA,MAAAc,MAAA,QAAAlB,YAAA,CAAAmB,QAAA,CAAAC,SAAA;MACA,MAAAC,MAAA,cAAArB,YAAA,CAAAsB,SAAA,OAAAJ,MAAA,CAAAK,UAAA;MACA,IAAAF,MAAA,UAAApB,YAAA;QACA,KAAAJ,QAAA,GAAAwB,MAAA;MACA;IACA;IACA,MAAAG,YAAAC,IAAA;MACA,MAAAP,MAAA,QAAAlB,YAAA,CAAAmB,QAAA,CAAAC,SAAA;MACA,MAAAM,cAAA,QAAA1B,YAAA,CAAA2B,OAAA,CAAAT,MAAA;MACA,MAAAU,EAAA,SAAAF,cAAA,CAAAF,WAAA,CAAAC,IAAA;MACAT,OAAA,CAAAa,GAAA,kBAAAD,EAAA;MACA,KAAA/B,QAAA,GAAA4B,IAAA;IACA;IACA,MAAAK,aAAA;MACA;QACA,UAAAhC,IAAA;UACAkB,OAAA,CAAAC,KAAA;UACA;QACA;QACA,KAAAlB,MAAA,SAAArB,MAAA;;QAEA;QACA,MAAA2C,MAAA,cAAAtB,MAAA,CAAAgC,GAAA,MAAAjC,IAAA;;QAEA;QACA,WAAAC,MAAA,CAAAiC,KAAA,CAAAC,EAAA,UAAAZ,MAAA,CAAAa,GAAA,QAAAb,MAAA,CAAAa,GAAA;QAEAlB,OAAA,CAAAa,GAAA,cAAAR,MAAA,CAAAa,GAAA;;QAEA;QACA,WAAAV,WAAA,CAAAH,MAAA,CAAAa,GAAA,CAAAC,QAAA;MACA,SAAAlB,KAAA;QACAD,OAAA,CAAAC,KAAA,8BAAAA,KAAA,CAAAmB,OAAA;MACA;IACA;IACAC,aAAAC,KAAA;MACA,MAAAxD,IAAA,GAAAwD,KAAA,CAAAC,MAAA,CAAAP,KAAA;MACA,MAAAQ,MAAA,OAAAC,UAAA;MACAD,MAAA,CAAAE,iBAAA,CAAA5D,IAAA;MACA0D,MAAA,CAAAG,SAAA;QACA,KAAA7C,IAAA,GAAAlB,MAAA,CAAAgE,IAAA,CAAAJ,MAAA,CAAAnB,MAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}