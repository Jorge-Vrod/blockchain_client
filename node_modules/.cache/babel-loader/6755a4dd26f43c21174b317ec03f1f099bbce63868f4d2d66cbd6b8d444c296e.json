{"ast":null,"code":"import LineChart from \"@/components/Charts/LineChart\";\nimport * as chartConfigs from \"@/components/Charts/config\";\nimport config from \"@/config\";\nimport { ref, onMounted } from \"vue\";\nimport { create } from \"kubo-rpc-client\";\nimport { ethers } from \"ethers\";\nimport { Buffer } from \"buffer\";\nimport { addresses, abis } from \"../contracts\";\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nexport default {\n  components: {\n    LineChart\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      ipfsHash: \"\",\n      number: \"\",\n      errorMessage: \"\",\n      uploadMessage: \"\",\n      defaultProvider: null,\n      ipfsContract: null,\n      campaign: {\n        id: 1,\n        name: \"Save the Rainforest\",\n        description: \"Help us save the Amazon rainforest by funding reforestation projects.\",\n        dollarsNeeded: 500000,\n        dollarsFunded: 120000,\n        image: \"https://placehold.co/600x400/EEE/31343C\",\n        viewedLastHour: 90\n      },\n      greenLineChart: {\n        extraOptions: chartConfigs.greenChartOptions,\n        chartData: {\n          labels: [\"Day 1\", \"Day 2\", \"Day 3\", \"Day 4\", \"Day 5\"],\n          datasets: [{\n            label: \"Donations (in USD)\",\n            fill: true,\n            borderColor: config.colors.primary,\n            borderWidth: 2,\n            borderDash: [],\n            borderDashOffset: 0.0,\n            pointBackgroundColor: config.colors.primary,\n            pointBorderColor: \"rgba(255,255,255,0)\",\n            pointHoverBackgroundColor: config.colors.primary,\n            pointBorderWidth: 20,\n            pointHoverRadius: 4,\n            pointHoverBorderWidth: 15,\n            pointRadius: 4,\n            data: [80, 100, 70, 80, 120, 80]\n          }]\n        },\n        gradientColors: [\"rgba(66,134,121,0.15)\", \"rgba(66,134,121,0.0)\", \"rgba(66,134,121,0)\"],\n        gradientStops: [1, 0.4, 0]\n      }\n    };\n  },\n  computed: {\n    progressPercentage() {\n      return (this.campaign.dollarsFunded / this.campaign.dollarsNeeded * 100).toFixed(2);\n    }\n  },\n  created() {\n    this.defaultProvider = new ethers.providers.Web3Provider(window.ethereum);\n    this.ipfsContract = new ethers.Contract(addresses.ipfs, abis.ipfs, this.defaultProvider);\n    window.ethereum.enable();\n    this.readFile();\n  },\n  methods: {\n    async readFile() {\n      const signer = this.defaultProvider.getSigner();\n      const file = await this.ipfsContract.userFiles(signer.getAddress());\n      if (file !== ZERO_ADDRESS) {\n        this.ipfsHash = file;\n      }\n    },\n    async setFileIPFS(hash) {\n      const ipfsWithSigner = this.ipfsContract.connect(this.defaultProvider.getSigner());\n      const tx = await ipfsWithSigner.setFileIPFS(hash);\n      await tx.wait(); // Ensure the transaction is mined before proceeding\n      this.ipfsHash = hash;\n    },\n    async handleSubmit() {\n      if (this.number === \"\" || isNaN(this.number) || this.number < 0 || this.number > 1000000) {\n        this.errorMessage = \"Please enter a valid number between 0 and 1,000,000.\";\n        this.uploadMessage = \"\"; // Clear previous messages if validation fails\n        return;\n      }\n      this.errorMessage = \"\";\n      this.uploadMessage = \"Uploading image to IPFS...\";\n      try {\n        const client = create({\n          url: \"/ip4/127.0.0.1/tcp/5001\"\n        });\n        const response = await fetch(\"https://picsum.photos/200\");\n        if (!response.ok) {\n          throw new Error(\"Image file not found or inaccessible.\");\n        }\n        const fileBuffer = await response.arrayBuffer();\n        const fileResult = await client.add(Buffer.from(fileBuffer));\n        const filePath = `/${fileResult.cid}`;\n        let fileExists = false;\n        for await (const file of client.files.ls(\"/\")) {\n          if (file.name === fileResult.cid.toString()) {\n            fileExists = true;\n            break;\n          }\n        }\n        if (fileExists) {\n          await client.files.rm(filePath, {\n            recursive: true\n          });\n        }\n        await client.files.cp(`/ipfs/${fileResult.cid}`, filePath);\n        await this.setFileIPFS(fileResult.cid.toString());\n        this.uploadMessage = \"Image uploaded successfully! CID: \" + fileResult.cid;\n      } catch (error) {\n        console.error(\"Error during upload:\", error.message);\n        this.uploadMessage = \"Error uploading image to IPFS.\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["LineChart","chartConfigs","config","ref","onMounted","create","ethers","Buffer","addresses","abis","ZERO_ADDRESS","components","props","id","type","String","required","data","ipfsHash","number","errorMessage","uploadMessage","defaultProvider","ipfsContract","campaign","name","description","dollarsNeeded","dollarsFunded","image","viewedLastHour","greenLineChart","extraOptions","greenChartOptions","chartData","labels","datasets","label","fill","borderColor","colors","primary","borderWidth","borderDash","borderDashOffset","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","gradientColors","gradientStops","computed","progressPercentage","toFixed","created","providers","Web3Provider","window","ethereum","Contract","ipfs","enable","readFile","methods","signer","getSigner","file","userFiles","getAddress","setFileIPFS","hash","ipfsWithSigner","connect","tx","wait","handleSubmit","isNaN","client","url","response","fetch","ok","Error","fileBuffer","arrayBuffer","fileResult","add","from","filePath","cid","fileExists","files","ls","toString","rm","recursive","cp","error","console","message"],"sources":["src/pages/CampaignDetail.vue"],"sourcesContent":["<template>\n    <div class=\"campaign-detail\">\n      <div class=\"container\">\n        <!-- Campaign Header -->\n        <div class=\"row mb-4\">\n          <div class=\"col-12 text-center\">\n            <h1 class=\"campaign-title\">{{ campaign.name }}</h1>\n            <p class=\"campaign-description\">{{ campaign.description }}</p>\n          </div>\n        </div>\n  \n        <!-- Campaign Image and Info -->\n        <div class=\"row align-items-center\">\n          <div class=\"col-md-6\">\n            <img :src=\"campaign.image\" alt=\"Campaign Image\" class=\"img-fluid rounded shadow\" />\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"campaign-info\">\n              <p><strong>Funding Progress:</strong></p>\n              <div class=\"progress mb-3\">\n                <div\n                  class=\"progress-bar\"\n                  role=\"progressbar\"\n                  :style=\"{ width: progressPercentage + '%' }\"\n                  :aria-valuenow=\"progressPercentage\"\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                >\n                  {{ progressPercentage }}%\n                </div>\n              </div>\n              <p><strong>Funds Needed:</strong> ${{ campaign.dollarsNeeded }}</p>\n              <p><strong>Funds Raised:</strong> ${{ campaign.dollarsFunded }}</p>\n              <p><strong>Viewed in Last Hour:</strong> {{ campaign.viewedLastHour }}</p>\n              <div class=\"col-md-6\">\n                <div class=\"row mt-5\">\n                  <form @submit.prevent=\"handleSubmit\">\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      v-model=\"number\"\n                      placeholder=\"Donation quantity (USD)\"\n                    />\n                    <p v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\n                    <button type=\"submit\" class=\"btn\">Support campaign</button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n  \n        <!-- Campaign Objectives -->\n        <div class=\"row mt-5\">\n          <div class=\"col-12\">\n            <h3>Campaign Objectives</h3>\n            <ul>\n              <li><strong>$100,000:</strong> Saving the forest by protecting endangered areas.</li>\n              <li><strong>$200,000:</strong> Launch a large-scale reforestation project.</li>\n              <li><strong>$500,000:</strong> Create long-term conservation programs involving local communities.</li>\n            </ul>\n          </div>\n        </div>\n  \n        <!-- Donation Progress Chart -->\n        <div class=\"row mt-5\">\n          <div class=\"col-12\">\n            <h3>Donation Progress Over Time</h3>\n            <div class=\"chart-area\">\n                <line-chart\n                style=\"height: 100%\"\n                chart-id=\"green-line-chart\"\n                :chart-data=\"greenLineChart.chartData\"\n                :gradient-stops=\"greenLineChart.gradientStops\"\n                :extra-options=\"greenLineChart.extraOptions\"\n              >\n              </line-chart>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  \n\n<script>\nimport LineChart from \"@/components/Charts/LineChart\";\nimport * as chartConfigs from \"@/components/Charts/config\";\nimport config from \"@/config\";\nimport { ref, onMounted } from \"vue\";\nimport { create } from \"kubo-rpc-client\";\nimport { ethers } from \"ethers\";\nimport { Buffer } from \"buffer\";\nimport { addresses, abis } from \"../contracts\";\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\nexport default {\n  components: {\n    LineChart,\n  },\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      ipfsHash: \"\",\n      number: \"\",\n      errorMessage: \"\",\n      uploadMessage: \"\",\n      defaultProvider: null,\n      ipfsContract: null,\n      campaign: {\n        id: 1,\n        name: \"Save the Rainforest\",\n        description: \"Help us save the Amazon rainforest by funding reforestation projects.\",\n        dollarsNeeded: 500000,\n        dollarsFunded: 120000,\n        image: \"https://placehold.co/600x400/EEE/31343C\",\n        viewedLastHour: 90,\n      },\n      greenLineChart: {\n        extraOptions: chartConfigs.greenChartOptions,\n        chartData: {\n          labels: [\"Day 1\", \"Day 2\", \"Day 3\", \"Day 4\", \"Day 5\"],\n          datasets: [\n            {\n              label: \"Donations (in USD)\",\n              fill: true,\n              borderColor: config.colors.primary,\n              borderWidth: 2,\n              borderDash: [],\n              borderDashOffset: 0.0,\n              pointBackgroundColor: config.colors.primary,\n              pointBorderColor: \"rgba(255,255,255,0)\",\n              pointHoverBackgroundColor: config.colors.primary,\n              pointBorderWidth: 20,\n              pointHoverRadius: 4,\n              pointHoverBorderWidth: 15,\n              pointRadius: 4,\n              data: [80, 100, 70, 80, 120, 80],\n            },\n          ],\n        },\n        gradientColors: [\n          \"rgba(66,134,121,0.15)\",\n          \"rgba(66,134,121,0.0)\",\n          \"rgba(66,134,121,0)\",\n        ],\n        gradientStops: [1, 0.4, 0],\n      },\n    };\n  },\n  computed: {\n    progressPercentage() {\n      return ((this.campaign.dollarsFunded / this.campaign.dollarsNeeded) * 100).toFixed(2);\n    },\n  },\n  created() {\n    this.defaultProvider = new ethers.providers.Web3Provider(window.ethereum);\n    this.ipfsContract = new ethers.Contract(\n      addresses.ipfs,\n      abis.ipfs,\n      this.defaultProvider\n    );\n\n    window.ethereum.enable();\n\n    this.readFile();\n  },\n  methods: {\n    async readFile() {\n      const signer = this.defaultProvider.getSigner();\n      const file = await this.ipfsContract.userFiles(signer.getAddress());\n      if (file !== ZERO_ADDRESS) {\n        this.ipfsHash = file;\n      }\n    },\n    async setFileIPFS(hash) {\n      const ipfsWithSigner = this.ipfsContract.connect(\n        this.defaultProvider.getSigner()\n      );\n      const tx = await ipfsWithSigner.setFileIPFS(hash);\n      await tx.wait(); // Ensure the transaction is mined before proceeding\n      this.ipfsHash = hash;\n    },\n    async handleSubmit() {\n      if (this.number === \"\" || isNaN(this.number) || this.number < 0 || this.number > 1000000) {\n        this.errorMessage = \"Please enter a valid number between 0 and 1,000,000.\";\n        this.uploadMessage = \"\"; // Clear previous messages if validation fails\n        return;\n      }\n\n      this.errorMessage = \"\";\n      this.uploadMessage = \"Uploading image to IPFS...\";\n\n      try {\n        const client = create({ url: \"/ip4/127.0.0.1/tcp/5001\" });\n\n        const response = await fetch(\"https://picsum.photos/200\");\n\n        if (!response.ok) {\n          throw new Error(\"Image file not found or inaccessible.\");\n        }\n\n        const fileBuffer = await response.arrayBuffer();\n\n        const fileResult = await client.add(Buffer.from(fileBuffer));\n\n        const filePath = `/${fileResult.cid}`;\n\n        let fileExists = false;\n        for await (const file of client.files.ls(\"/\")) {\n          if (file.name === fileResult.cid.toString()) {\n            fileExists = true;\n            break;\n          }\n        }\n\n        if (fileExists) {\n          await client.files.rm(filePath, { recursive: true });\n        }\n\n        await client.files.cp(`/ipfs/${fileResult.cid}`, filePath);\n\n        await this.setFileIPFS(fileResult.cid.toString());\n        this.uploadMessage = \"Image uploaded successfully! CID: \" + fileResult.cid;\n      } catch (error) {\n        console.error(\"Error during upload:\", error.message);\n        this.uploadMessage = \"Error uploading image to IPFS.\";\n      }\n    },\n  },\n};\n\n</script>\n\n<style scoped>\n.campaign-title {\n  font-size: 2rem;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n}\n.campaign-description {\n  font-size: 1.25rem;\n  color: #6c757d;\n}\n.img-fluid {\n  max-width: 100%;\n  height: auto;\n}\n.campaign-info {\n  font-size: 1.1rem;\n}\n.progress-bar {\n  background-color: #4caf50;\n}\n.chart-area {\n  height: 400px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}