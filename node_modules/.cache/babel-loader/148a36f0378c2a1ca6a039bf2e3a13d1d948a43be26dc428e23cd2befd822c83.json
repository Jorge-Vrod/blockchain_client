{"ast":null,"code":"import { create } from \"kubo-rpc-client\";\nimport { ethers } from \"ethers\";\nimport { Buffer } from \"buffer\";\nimport LineChart from \"@/components/Charts/LineChart\";\nimport * as chartConfigs from \"@/components/Charts/config\";\nimport config from \"@/config\";\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst ipfsContract = new ethers.Contract(config.contracts.ipfs.address, config.contracts.ipfs.abi, provider);\nexport default {\n  components: {\n    LineChart\n  },\n  data() {\n    return {\n      campaign: {\n        id: 1,\n        name: \"Save the Rainforest\",\n        description: \"Help us save the Amazon rainforest by funding reforestation projects.\",\n        dollarsNeeded: 500000,\n        dollarsFunded: 120000,\n        image: \"https://placehold.co/600x400/EEE/31343C\",\n        viewedLastHour: 90\n      },\n      donationAmount: null,\n      errorMessage: \"\",\n      uploadMessage: \"\"\n    };\n  },\n  computed: {\n    progressPercentage() {\n      return (this.campaign.dollarsFunded / this.campaign.dollarsNeeded * 100).toFixed(2);\n    }\n  },\n  methods: {\n    async donate() {\n      if (!this.donationAmount || isNaN(this.donationAmount) || this.donationAmount < 1) {\n        this.errorMessage = \"Please enter a valid donation amount.\";\n        return;\n      }\n      this.errorMessage = \"\";\n      this.uploadMessage = \"Uploading image to IPFS...\";\n      try {\n        const client = create({\n          url: \"/ip4/127.0.0.1/tcp/5001\"\n        });\n        const response = await fetch(this.campaign.image);\n        if (!response.ok) throw new Error(\"Image file not found or inaccessible.\");\n        const fileBuffer = await response.arrayBuffer();\n        const fileResult = await client.add(Buffer.from(fileBuffer));\n        const filePath = `/${fileResult.cid}`;\n        for await (const file of client.files.ls(\"/\")) {\n          if (file.name === fileResult.cid.toString()) {\n            await client.files.rm(filePath, {\n              recursive: true\n            });\n            break;\n          }\n        }\n        await client.files.cp(`/ipfs/${fileResult.cid}`, filePath);\n        const signer = provider.getSigner();\n        const ipfsWithSigner = ipfsContract.connect(signer);\n        const tx = await ipfsWithSigner.setFileIPFS(fileResult.cid.toString());\n        await tx.wait();\n        this.uploadMessage = `Image uploaded successfully! CID: ${fileResult.cid}`;\n      } catch (error) {\n        console.error(\"Error during upload:\", error.message);\n        this.uploadMessage = \"Error uploading image to IPFS.\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["create","ethers","Buffer","LineChart","chartConfigs","config","ZERO_ADDRESS","provider","providers","Web3Provider","window","ethereum","ipfsContract","Contract","contracts","ipfs","address","abi","components","data","campaign","id","name","description","dollarsNeeded","dollarsFunded","image","viewedLastHour","donationAmount","errorMessage","uploadMessage","computed","progressPercentage","toFixed","methods","donate","isNaN","client","url","response","fetch","ok","Error","fileBuffer","arrayBuffer","fileResult","add","from","filePath","cid","file","files","ls","toString","rm","recursive","cp","signer","getSigner","ipfsWithSigner","connect","tx","setFileIPFS","wait","error","console","message"],"sources":["src/pages/CampaignDetail.vue"],"sourcesContent":["<template>\n    <div class=\"campaign-detail\">\n      <div class=\"container\">\n        <!-- Campaign Header -->\n        <div class=\"row mb-4\">\n          <div class=\"col-12 text-center\">\n            <h1 class=\"campaign-title\">{{ campaign.name }}</h1>\n            <p class=\"campaign-description\">{{ campaign.description }}</p>\n          </div>\n        </div>\n  \n        <!-- Campaign Image and Info -->\n        <div class=\"row align-items-center\">\n          <div class=\"col-md-6\">\n            <img :src=\"campaign.image\" alt=\"Campaign Image\" class=\"img-fluid rounded shadow\" />\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"campaign-info\">\n              <p><strong>Funding Progress:</strong></p>\n              <div class=\"progress mb-3\">\n                <div\n                  class=\"progress-bar\"\n                  role=\"progressbar\"\n                  :style=\"{ width: progressPercentage + '%' }\"\n                  :aria-valuenow=\"progressPercentage\"\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                >\n                  {{ progressPercentage }}%\n                </div>\n              </div>\n              <p><strong>Funds Needed:</strong> ${{ campaign.dollarsNeeded }}</p>\n              <p><strong>Funds Raised:</strong> ${{ campaign.dollarsFunded }}</p>\n              <p><strong>Viewed in Last Hour:</strong> {{ campaign.viewedLastHour }}</p>\n              <div class=\"donation-input\">\n                <label for=\"donationAmount\"><strong>Enter your donation amount:</strong></label>\n                <input\n                  type=\"number\"\n                  id=\"donationAmount\"\n                  class=\"form-control\"\n                  v-model.number=\"donationAmount\"\n                  min=\"1\"\n                  placeholder=\"Enter amount in USD\"\n                />\n                <button class=\"btn btn-success mt-2\" @click=\"donate\">Donate Now</button>\n                <p v-if=\"errorMessage\" class=\"text-danger\">{{ errorMessage }}</p>\n                <p v-if=\"uploadMessage\">{{ uploadMessage }}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { create } from \"kubo-rpc-client\";\n  import { ethers } from \"ethers\";\n  import { Buffer } from \"buffer\";\n  import LineChart from \"@/components/Charts/LineChart\";\n  import * as chartConfigs from \"@/components/Charts/config\";\n  import config from \"@/config\";\n  \n  const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n  \n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  \n  const ipfsContract = new ethers.Contract(\n    config.contracts.ipfs.address,\n    config.contracts.ipfs.abi,\n    provider\n  );\n  \n  export default {\n    components: {\n      LineChart,\n    },\n    data() {\n      return {\n        campaign: {\n          id: 1,\n          name: \"Save the Rainforest\",\n          description: \"Help us save the Amazon rainforest by funding reforestation projects.\",\n          dollarsNeeded: 500000,\n          dollarsFunded: 120000,\n          image: \"https://placehold.co/600x400/EEE/31343C\",\n          viewedLastHour: 90,\n        },\n        donationAmount: null,\n        errorMessage: \"\",\n        uploadMessage: \"\",\n      };\n    },\n    computed: {\n      progressPercentage() {\n        return ((this.campaign.dollarsFunded / this.campaign.dollarsNeeded) * 100).toFixed(2);\n      },\n    },\n    methods: {\n      async donate() {\n        if (!this.donationAmount || isNaN(this.donationAmount) || this.donationAmount < 1) {\n          this.errorMessage = \"Please enter a valid donation amount.\";\n          return;\n        }\n  \n        this.errorMessage = \"\";\n        this.uploadMessage = \"Uploading image to IPFS...\";\n  \n        try {\n          const client = create({ url: \"/ip4/127.0.0.1/tcp/5001\" });\n  \n          const response = await fetch(this.campaign.image);\n          if (!response.ok) throw new Error(\"Image file not found or inaccessible.\");\n  \n          const fileBuffer = await response.arrayBuffer();\n          const fileResult = await client.add(Buffer.from(fileBuffer));\n  \n          const filePath = `/${fileResult.cid}`;\n          for await (const file of client.files.ls(\"/\")) {\n            if (file.name === fileResult.cid.toString()) {\n              await client.files.rm(filePath, { recursive: true });\n              break;\n            }\n          }\n  \n          await client.files.cp(`/ipfs/${fileResult.cid}`, filePath);\n  \n          const signer = provider.getSigner();\n          const ipfsWithSigner = ipfsContract.connect(signer);\n          const tx = await ipfsWithSigner.setFileIPFS(fileResult.cid.toString());\n          await tx.wait();\n  \n          this.uploadMessage = `Image uploaded successfully! CID: ${fileResult.cid}`;\n        } catch (error) {\n          console.error(\"Error during upload:\", error.message);\n          this.uploadMessage = \"Error uploading image to IPFS.\";\n        }\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .campaign-title {\n    font-size: 2rem;\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n  }\n  .campaign-description {\n    font-size: 1.25rem;\n    color: #6c757d;\n  }\n  .img-fluid {\n    max-width: 100%;\n    height: auto;\n  }\n  .campaign-info {\n    font-size: 1.1rem;\n  }\n  .progress-bar {\n    background-color: #4caf50;\n  }\n  .text-danger {\n    color: red;\n  }\n  </style>\n  "],"mappings":"AAwDA,SAAAA,MAAA;AACA,SAAAC,MAAA;AACA,SAAAC,MAAA;AACA,OAAAC,SAAA;AACA,YAAAC,YAAA;AACA,OAAAC,MAAA;AAEA,MAAAC,YAAA;AAEA,MAAAC,QAAA,OAAAN,MAAA,CAAAO,SAAA,CAAAC,YAAA,CAAAC,MAAA,CAAAC,QAAA;AAEA,MAAAC,YAAA,OAAAX,MAAA,CAAAY,QAAA,CACAR,MAAA,CAAAS,SAAA,CAAAC,IAAA,CAAAC,OAAA,EACAX,MAAA,CAAAS,SAAA,CAAAC,IAAA,CAAAE,GAAA,EACAV,QACA;AAEA;EACAW,UAAA;IACAf;EACA;EACAgB,KAAA;IACA;MACAC,QAAA;QACAC,EAAA;QACAC,IAAA;QACAC,WAAA;QACAC,aAAA;QACAC,aAAA;QACAC,KAAA;QACAC,cAAA;MACA;MACAC,cAAA;MACAC,YAAA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACAC,mBAAA;MACA,aAAAZ,QAAA,CAAAK,aAAA,QAAAL,QAAA,CAAAI,aAAA,QAAAS,OAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,OAAA;MACA,UAAAP,cAAA,IAAAQ,KAAA,MAAAR,cAAA,UAAAA,cAAA;QACA,KAAAC,YAAA;QACA;MACA;MAEA,KAAAA,YAAA;MACA,KAAAC,aAAA;MAEA;QACA,MAAAO,MAAA,GAAArC,MAAA;UAAAsC,GAAA;QAAA;QAEA,MAAAC,QAAA,SAAAC,KAAA,MAAApB,QAAA,CAAAM,KAAA;QACA,KAAAa,QAAA,CAAAE,EAAA,YAAAC,KAAA;QAEA,MAAAC,UAAA,SAAAJ,QAAA,CAAAK,WAAA;QACA,MAAAC,UAAA,SAAAR,MAAA,CAAAS,GAAA,CAAA5C,MAAA,CAAA6C,IAAA,CAAAJ,UAAA;QAEA,MAAAK,QAAA,OAAAH,UAAA,CAAAI,GAAA;QACA,iBAAAC,IAAA,IAAAb,MAAA,CAAAc,KAAA,CAAAC,EAAA;UACA,IAAAF,IAAA,CAAA5B,IAAA,KAAAuB,UAAA,CAAAI,GAAA,CAAAI,QAAA;YACA,MAAAhB,MAAA,CAAAc,KAAA,CAAAG,EAAA,CAAAN,QAAA;cAAAO,SAAA;YAAA;YACA;UACA;QACA;QAEA,MAAAlB,MAAA,CAAAc,KAAA,CAAAK,EAAA,UAAAX,UAAA,CAAAI,GAAA,IAAAD,QAAA;QAEA,MAAAS,MAAA,GAAAlD,QAAA,CAAAmD,SAAA;QACA,MAAAC,cAAA,GAAA/C,YAAA,CAAAgD,OAAA,CAAAH,MAAA;QACA,MAAAI,EAAA,SAAAF,cAAA,CAAAG,WAAA,CAAAjB,UAAA,CAAAI,GAAA,CAAAI,QAAA;QACA,MAAAQ,EAAA,CAAAE,IAAA;QAEA,KAAAjC,aAAA,wCAAAe,UAAA,CAAAI,GAAA;MACA,SAAAe,KAAA;QACAC,OAAA,CAAAD,KAAA,yBAAAA,KAAA,CAAAE,OAAA;QACA,KAAApC,aAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}