{"ast":null,"code":"import LineChart from \"@/components/Charts/LineChart\";\nimport * as chartConfigs from \"@/components/Charts/config\";\nimport { create } from \"kubo-rpc-client\";\nimport { ethers } from \"ethers\";\nimport config from \"@/config\";\nexport default {\n  components: {\n    LineChart\n  },\n  data() {\n    return {\n      campaign: {\n        id: 1,\n        name: \"Save the Rainforest\",\n        description: \"Help us save the Amazon rainforest by funding reforestation projects.\",\n        dollarsNeeded: 500000,\n        dollarsFunded: 120000,\n        image: \"https://placehold.co/600x400/EEE/31343C\",\n        viewedLastHour: 90\n      },\n      greenLineChart: {\n        extraOptions: chartConfigs.greenChartOptions,\n        chartData: {\n          labels: [\"Day 1\", \"Day 2\", \"Day 3\", \"Day 4\", \"Day 5\"],\n          datasets: [{\n            label: \"Donations (in USD)\",\n            fill: true,\n            borderColor: config.colors.success,\n            borderWidth: 2,\n            data: [5000, 15000, 40000, 90000, 120000]\n          }]\n        },\n        gradientStops: [1, 0.4, 0]\n      },\n      donationAmount: 0,\n      uploadMessage: \"\",\n      errorMessage: \"\",\n      ipfsClient: create({\n        url: \"/ip4/127.0.0.1/tcp/5001\"\n      }),\n      ethereumProvider: new ethers.providers.Web3Provider(window.ethereum),\n      ipfsContract: null\n    };\n  },\n  computed: {\n    progressPercentage() {\n      return (this.campaign.dollarsFunded / this.campaign.dollarsNeeded * 100).toFixed(2);\n    }\n  },\n  methods: {\n    async handleDonate() {\n      if (this.donationAmount <= 0) {\n        this.errorMessage = \"Please enter a valid donation amount.\";\n        return;\n      }\n      this.errorMessage = \"\";\n      this.uploadMessage = \"Uploading image to IPFS...\";\n      try {\n        const response = await fetch(this.campaign.image);\n        if (!response.ok) {\n          throw new Error(\"Image file not found or inaccessible.\");\n        }\n        const fileBuffer = await response.arrayBuffer();\n        const fileResult = await this.ipfsClient.add(Buffer.from(fileBuffer));\n        this.uploadMessage = \"Image uploaded to IPFS successfully! CID: \" + fileResult.cid;\n        const ipfsWithSigner = this.ipfsContract.connect(this.ethereumProvider.getSigner());\n        const tx = await ipfsWithSigner.setFileIPFS(fileResult.cid.toString());\n        await tx.wait();\n        this.uploadMessage += \" IPFS hash saved to Ethereum contract!\";\n      } catch (error) {\n        this.uploadMessage = \"Error uploading image to IPFS: \" + error.message;\n      }\n    }\n  },\n  async mounted() {\n    await this.ethereumProvider.send(\"eth_requestAccounts\", []);\n    const signer = this.ethereumProvider.getSigner();\n    this.ipfsContract = new ethers.Contract(config.contracts.ipfsAddress, config.contracts.ipfsAbi, signer);\n  }\n};","map":{"version":3,"names":["LineChart","chartConfigs","create","ethers","config","components","data","campaign","id","name","description","dollarsNeeded","dollarsFunded","image","viewedLastHour","greenLineChart","extraOptions","greenChartOptions","chartData","labels","datasets","label","fill","borderColor","colors","success","borderWidth","gradientStops","donationAmount","uploadMessage","errorMessage","ipfsClient","url","ethereumProvider","providers","Web3Provider","window","ethereum","ipfsContract","computed","progressPercentage","toFixed","methods","handleDonate","response","fetch","ok","Error","fileBuffer","arrayBuffer","fileResult","add","Buffer","from","cid","ipfsWithSigner","connect","getSigner","tx","setFileIPFS","toString","wait","error","message","mounted","send","signer","Contract","contracts","ipfsAddress","ipfsAbi"],"sources":["src/pages/CampaignDetail.vue"],"sourcesContent":["<template>\n    <div class=\"campaign-detail\">\n      <div class=\"container\">\n        <!-- Campaign Header -->\n        <div class=\"row mb-4\">\n          <div class=\"col-12 text-center\">\n            <h1 class=\"campaign-title\">{{ campaign.name }}</h1>\n            <p class=\"campaign-description\">{{ campaign.description }}</p>\n          </div>\n        </div>\n  \n        <!-- Campaign Image and Info -->\n        <div class=\"row align-items-center\">\n          <div class=\"col-md-6\">\n            <img :src=\"campaign.image\" alt=\"Campaign Image\" class=\"img-fluid rounded shadow\" />\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"campaign-info\">\n              <p><strong>Funding Progress:</strong></p>\n              <div class=\"progress mb-3\">\n                <div\n                  class=\"progress-bar\"\n                  role=\"progressbar\"\n                  :style=\"{ width: progressPercentage + '%' }\"\n                  :aria-valuenow=\"progressPercentage\"\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                >\n                  {{ progressPercentage }}%\n                </div>\n              </div>\n              <p><strong>Funds Needed:</strong> ${{ campaign.dollarsNeeded }}</p>\n              <p><strong>Funds Raised:</strong> ${{ campaign.dollarsFunded }}</p>\n              <p><strong>Viewed in Last Hour:</strong> {{ campaign.viewedLastHour }}</p>\n              <div class=\"donation-input\">\n                <label for=\"donationAmount\"><strong>Enter your donation amount:</strong></label>\n                <input\n                  type=\"number\"\n                  id=\"donationAmount\"\n                  class=\"form-control\"\n                  v-model.number=\"donationAmount\"\n                  min=\"1\"\n                  placeholder=\"Enter amount in USD\"\n                />\n                <button class=\"btn btn-success mt-2\" @click=\"handleDonate\">Donate Now</button>\n                <p v-if=\"uploadMessage\" class=\"upload-message\">{{ uploadMessage }}</p>\n                <p v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n  \n        <!-- Campaign Objectives -->\n        <div class=\"row mt-5\">\n          <div class=\"col-12\">\n            <h3>Campaign Objectives</h3>\n            <ul>\n              <li><strong>$100,000:</strong> Saving the forest by protecting endangered areas.</li>\n              <li><strong>$200,000:</strong> Launch a large-scale reforestation project.</li>\n              <li><strong>$500,000:</strong> Create long-term conservation programs involving local communities.</li>\n            </ul>\n          </div>\n        </div>\n  \n        <!-- Donation Progress Chart -->\n        <div class=\"row mt-5\">\n          <div class=\"col-12\">\n            <h3>Donation Progress Over Time</h3>\n            <div class=\"chart-area\">\n              <line-chart\n                style=\"height: 100%\"\n                chart-id=\"green-line-chart\"\n                :chart-data=\"greenLineChart.chartData\"\n                :gradient-stops=\"greenLineChart.gradientStops\"\n                :extra-options=\"greenLineChart.extraOptions\"\n              ></line-chart>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import LineChart from \"@/components/Charts/LineChart\";\n  import * as chartConfigs from \"@/components/Charts/config\";\n  import { create } from \"kubo-rpc-client\";\n  import { ethers } from \"ethers\";\n  import config from \"@/config\";\n  \n  export default {\n    components: {\n      LineChart,\n    },\n    data() {\n      return {\n        campaign: {\n          id: 1,\n          name: \"Save the Rainforest\",\n          description: \"Help us save the Amazon rainforest by funding reforestation projects.\",\n          dollarsNeeded: 500000,\n          dollarsFunded: 120000,\n          image: \"https://placehold.co/600x400/EEE/31343C\",\n          viewedLastHour: 90,\n        },\n        greenLineChart: {\n          extraOptions: chartConfigs.greenChartOptions,\n          chartData: {\n            labels: [\"Day 1\", \"Day 2\", \"Day 3\", \"Day 4\", \"Day 5\"],\n            datasets: [\n              {\n                label: \"Donations (in USD)\",\n                fill: true,\n                borderColor: config.colors.success,\n                borderWidth: 2,\n                data: [5000, 15000, 40000, 90000, 120000],\n              },\n            ],\n          },\n          gradientStops: [1, 0.4, 0],\n        },\n        donationAmount: 0,\n        uploadMessage: \"\",\n        errorMessage: \"\",\n        ipfsClient: create({ url: \"/ip4/127.0.0.1/tcp/5001\" }),\n        ethereumProvider: new ethers.providers.Web3Provider(window.ethereum),\n        ipfsContract: null,\n      };\n    },\n    computed: {\n      progressPercentage() {\n        return ((this.campaign.dollarsFunded / this.campaign.dollarsNeeded) * 100).toFixed(2);\n      },\n    },\n    methods: {\n      async handleDonate() {\n        if (this.donationAmount <= 0) {\n          this.errorMessage = \"Please enter a valid donation amount.\";\n          return;\n        }\n  \n        this.errorMessage = \"\";\n        this.uploadMessage = \"Uploading image to IPFS...\";\n  \n        try {\n          const response = await fetch(this.campaign.image);\n  \n          if (!response.ok) {\n            throw new Error(\"Image file not found or inaccessible.\");\n          }\n  \n          const fileBuffer = await response.arrayBuffer();\n          const fileResult = await this.ipfsClient.add(Buffer.from(fileBuffer));\n  \n          this.uploadMessage = \"Image uploaded to IPFS successfully! CID: \" + fileResult.cid;\n  \n          const ipfsWithSigner = this.ipfsContract.connect(this.ethereumProvider.getSigner());\n          const tx = await ipfsWithSigner.setFileIPFS(fileResult.cid.toString());\n          await tx.wait();\n  \n          this.uploadMessage += \" IPFS hash saved to Ethereum contract!\";\n        } catch (error) {\n          this.uploadMessage = \"Error uploading image to IPFS: \" + error.message;\n        }\n      },\n    },\n    async mounted() {\n      await this.ethereumProvider.send(\"eth_requestAccounts\", []);\n      const signer = this.ethereumProvider.getSigner();\n      this.ipfsContract = new ethers.Contract(\n        config.contracts.ipfsAddress,\n        config.contracts.ipfsAbi,\n        signer\n      );\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .campaign-title {\n    font-size: 2rem;\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n  }\n  .campaign-description {\n    font-size: 1.25rem;\n    color: #6c757d;\n  }\n  .img-fluid {\n    max-width: 100%;\n    height: auto;\n  }\n  .campaign-info {\n    font-size: 1.1rem;\n  }\n  .progress-bar {\n    background-color: #4caf50;\n  }\n  .upload-message {\n    margin-top: 1rem;\n    color: green;\n  }\n  .error-message {\n    margin-top: 1rem;\n    color: red;\n  }\n  .chart-area {\n    height: 400px;\n  }\n  </style>\n  "],"mappings":"AAoFA,OAAAA,SAAA;AACA,YAAAC,YAAA;AACA,SAAAC,MAAA;AACA,SAAAC,MAAA;AACA,OAAAC,MAAA;AAEA;EACAC,UAAA;IACAL;EACA;EACAM,KAAA;IACA;MACAC,QAAA;QACAC,EAAA;QACAC,IAAA;QACAC,WAAA;QACAC,aAAA;QACAC,aAAA;QACAC,KAAA;QACAC,cAAA;MACA;MACAC,cAAA;QACAC,YAAA,EAAAf,YAAA,CAAAgB,iBAAA;QACAC,SAAA;UACAC,MAAA;UACAC,QAAA,GACA;YACAC,KAAA;YACAC,IAAA;YACAC,WAAA,EAAAnB,MAAA,CAAAoB,MAAA,CAAAC,OAAA;YACAC,WAAA;YACApB,IAAA;UACA;QAEA;QACAqB,aAAA;MACA;MACAC,cAAA;MACAC,aAAA;MACAC,YAAA;MACAC,UAAA,EAAA7B,MAAA;QAAA8B,GAAA;MAAA;MACAC,gBAAA,MAAA9B,MAAA,CAAA+B,SAAA,CAAAC,YAAA,CAAAC,MAAA,CAAAC,QAAA;MACAC,YAAA;IACA;EACA;EACAC,QAAA;IACAC,mBAAA;MACA,aAAAjC,QAAA,CAAAK,aAAA,QAAAL,QAAA,CAAAI,aAAA,QAAA8B,OAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,aAAA;MACA,SAAAf,cAAA;QACA,KAAAE,YAAA;QACA;MACA;MAEA,KAAAA,YAAA;MACA,KAAAD,aAAA;MAEA;QACA,MAAAe,QAAA,SAAAC,KAAA,MAAAtC,QAAA,CAAAM,KAAA;QAEA,KAAA+B,QAAA,CAAAE,EAAA;UACA,UAAAC,KAAA;QACA;QAEA,MAAAC,UAAA,SAAAJ,QAAA,CAAAK,WAAA;QACA,MAAAC,UAAA,cAAAnB,UAAA,CAAAoB,GAAA,CAAAC,MAAA,CAAAC,IAAA,CAAAL,UAAA;QAEA,KAAAnB,aAAA,kDAAAqB,UAAA,CAAAI,GAAA;QAEA,MAAAC,cAAA,QAAAjB,YAAA,CAAAkB,OAAA,MAAAvB,gBAAA,CAAAwB,SAAA;QACA,MAAAC,EAAA,SAAAH,cAAA,CAAAI,WAAA,CAAAT,UAAA,CAAAI,GAAA,CAAAM,QAAA;QACA,MAAAF,EAAA,CAAAG,IAAA;QAEA,KAAAhC,aAAA;MACA,SAAAiC,KAAA;QACA,KAAAjC,aAAA,uCAAAiC,KAAA,CAAAC,OAAA;MACA;IACA;EACA;EACA,MAAAC,QAAA;IACA,WAAA/B,gBAAA,CAAAgC,IAAA;IACA,MAAAC,MAAA,QAAAjC,gBAAA,CAAAwB,SAAA;IACA,KAAAnB,YAAA,OAAAnC,MAAA,CAAAgE,QAAA,CACA/D,MAAA,CAAAgE,SAAA,CAAAC,WAAA,EACAjE,MAAA,CAAAgE,SAAA,CAAAE,OAAA,EACAJ,MACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}