{"ast":null,"code":"import LineChart from \"@/components/Charts/LineChart\";\nimport * as chartConfigs from \"@/components/Charts/config\";\nimport config from \"@/config\";\nimport { ref, onMounted } from \"vue\";\nimport { ethers } from \"ethers\";\nimport { Campaign, NFTBadge } from \"@/config\";\nimport NFTGenerator from \"@/components/NFTGenerator.vue\";\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nexport default {\n  components: {\n    LineChart,\n    'nft-generator': NFTGenerator\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      donationAmount: \"\",\n      ipfsHash: \"\",\n      errorMessage: \"\",\n      uploadMessage: \"\",\n      defaultProvider: null,\n      ipfsContract: null,\n      campaign: {\n        id: 1,\n        name: \"Save the Rainforest\",\n        description: \"Help us save the Amazon rainforest by funding reforestation projects.\",\n        dollarsNeeded: 500000,\n        dollarsFunded: 120000,\n        image: \"https://placehold.co/600x400/EEE/31343C\",\n        viewedLastHour: 90\n      },\n      greenLineChart: {\n        extraOptions: chartConfigs.greenChartOptions,\n        chartData: {\n          labels: [\"Day 1\", \"Day 2\", \"Day 3\", \"Day 4\", \"Day 5\"],\n          datasets: [{\n            label: \"Donations (in USD)\",\n            fill: true,\n            borderColor: config.colors.primary,\n            borderWidth: 2,\n            borderDash: [],\n            borderDashOffset: 0.0,\n            pointBackgroundColor: config.colors.primary,\n            pointBorderColor: \"rgba(255,255,255,0)\",\n            pointHoverBackgroundColor: config.colors.primary,\n            pointBorderWidth: 20,\n            pointHoverRadius: 4,\n            pointHoverBorderWidth: 15,\n            pointRadius: 4,\n            data: [80, 100, 70, 80, 120, 80]\n          }]\n        },\n        gradientColors: [\"rgba(66,134,121,0.15)\", \"rgba(66,134,121,0.0)\", \"rgba(66,134,121,0)\"],\n        gradientStops: [1, 0.4, 0]\n      }\n    };\n  },\n  computed: {\n    progressPercentage() {\n      return (this.campaign.dollarsFunded / this.campaign.dollarsNeeded * 100).toFixed(2);\n    }\n  },\n  created() {\n    this.defaultProvider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\"); // Local Hardhat node\n\n    // Initialize contracts\n    this.campaignContract = new ethers.Contract(Campaign.address, Campaign.abi, this.defaultProvider);\n    this.nftBadgeContract = new ethers.Contract(NFTBadge.address, NFTBadge.abi, this.defaultProvider);\n    this.setupBadgeMintedListener();\n  },\n  methods: {\n    async readFile() {\n      const signer = await this.defaultProvider.getSigner();\n      const file = await this.ipfsContract.userFiles(signer.getAddress());\n      if (file !== ZERO_ADDRESS) {\n        this.ipfsHash = file;\n      }\n      return true;\n    },\n    async setFileIPFS(hash) {\n      const ipfsWithSigner = this.ipfsContract.connect(this.defaultProvider.getSigner());\n      const tx = await ipfsWithSigner.setFileIPFS(hash);\n      await tx.wait(); // Ensure the transaction is mined before proceeding\n      this.ipfsHash = hash;\n    },\n    async handleSubmit() {\n      if (this.donationAmount === \"\" || isNaN(this.donationAmount) || this.donationAmount <= 0) {\n        this.errorMessage = \"Please enter a valid donation amount.\";\n        return;\n      }\n      this.errorMessage = \"\";\n      this.successMessage = \"Processing your donation...\";\n      try {\n        const signer = this.defaultProvider.getSigner();\n        const campaignWithSigner = this.campaignContract.connect(signer);\n\n        // Send contribution\n        const tx = await campaignWithSigner.contribute({\n          value: ethers.utils.parseEther(this.donationAmount.toString())\n        });\n\n        // Wait for transaction to be mined\n        await tx.wait();\n        this.successMessage = \"Donation successful! Waiting for badge generation...\";\n\n        // Listen for the BadgeMinted event\n        this.listenForBadgeMinted(await signer.getAddress());\n      } catch (error) {\n        console.error(\"Error processing donation:\", error);\n        this.errorMessage = \"There was an issue with your donation. Please try again.\";\n      }\n    },\n    listenForBadgeMinted(recipientAddress) {\n      this.nftBadgeContract.on(\"BadgeMinted\", async (badgeId, recipient, tierIndex) => {\n        if (recipient.toLowerCase() === recipientAddress.toLowerCase()) {\n          this.successMessage = `Badge minted successfully! Badge ID: ${badgeId}`;\n        }\n      });\n    },\n    async generateNFT(tokenURI) {\n      try {\n        const response = await fetch(tokenURI);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch metadata from ${tokenURI}`);\n        }\n        const metadata = await response.json();\n\n        // Render or use metadata to display the NFT image\n        console.log(\"NFT Metadata:\", metadata);\n        this.successMessage = `NFT generated successfully! View your NFT at ${tokenURI}`;\n      } catch (error) {\n        console.error(\"Error generating NFT:\", error);\n        this.errorMessage = `Failed to generate NFT: ${error.message}`;\n      }\n    }\n  }\n};","map":{"version":3,"names":["LineChart","chartConfigs","config","ref","onMounted","ethers","Campaign","NFTBadge","NFTGenerator","ZERO_ADDRESS","components","props","id","type","String","required","data","donationAmount","ipfsHash","errorMessage","uploadMessage","defaultProvider","ipfsContract","campaign","name","description","dollarsNeeded","dollarsFunded","image","viewedLastHour","greenLineChart","extraOptions","greenChartOptions","chartData","labels","datasets","label","fill","borderColor","colors","primary","borderWidth","borderDash","borderDashOffset","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","gradientColors","gradientStops","computed","progressPercentage","toFixed","created","providers","JsonRpcProvider","campaignContract","Contract","address","abi","nftBadgeContract","setupBadgeMintedListener","methods","readFile","signer","getSigner","file","userFiles","getAddress","setFileIPFS","hash","ipfsWithSigner","connect","tx","wait","handleSubmit","isNaN","successMessage","campaignWithSigner","contribute","value","utils","parseEther","toString","listenForBadgeMinted","error","console","recipientAddress","on","badgeId","recipient","tierIndex","toLowerCase","generateNFT","tokenURI","response","fetch","ok","Error","metadata","json","log","message"],"sources":["src/pages/CampaignDetail.vue"],"sourcesContent":["<template>\n  <div class=\"campaign-detail\">\n    <div class=\"container\">\n      <!-- Campaign Header -->\n      <div class=\"row mb-4\">\n        <div class=\"col-12 text-center\">\n          <h1 class=\"campaign-title\">{{ campaign.name }}</h1>\n          <p class=\"campaign-description\">{{ campaign.description }}</p>\n        </div>\n      </div>\n\n      <!-- Campaign Image and Info -->\n      <div class=\"row align-items-center\">\n        <div class=\"col-md-6\">\n          <img :src=\"campaign.image\" alt=\"Campaign Image\" class=\"img-fluid rounded shadow\" />\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"campaign-info\">\n            <p><strong>Funding Progress:</strong></p>\n            <div class=\"progress mb-3\">\n              <div\n                class=\"progress-bar\"\n                role=\"progressbar\"\n                :style=\"{ width: progressPercentage + '%' }\"\n                :aria-valuenow=\"progressPercentage\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n              >\n                {{ progressPercentage }}%\n              </div>\n            </div>\n            <p><strong>Funds Needed:</strong> ${{ campaign.dollarsNeeded }}</p>\n            <p><strong>Funds Raised:</strong> ${{ campaign.dollarsFunded }}</p>\n            <p><strong>Viewed in Last Hour:</strong> {{ campaign.viewedLastHour }}</p>\n            <div class=\"col-md-6\">\n              <div class=\"row mt-5\">\n                <form @submit.prevent=\"handleSubmit\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    v-model=\"donationAmount\"\n                    placeholder=\"Donation quantity (USD)\"\n                  />\n                  <p v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\n                  <button type=\"submit\" class=\"btn\">Support campaign</button>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Campaign Objectives -->\n      <div class=\"row mt-5\">\n        <div class=\"col-12\">\n          <h3>Campaign Objectives</h3>\n          <ul>\n            <li><strong>$100,000:</strong> Saving the forest by protecting endangered areas.</li>\n            <li><strong>$200,000:</strong> Launch a large-scale reforestation project.</li>\n            <li><strong>$500,000:</strong> Create long-term conservation programs involving local communities.</li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- Donation Progress Chart -->\n      <div class=\"row mt-5\">\n        <div class=\"col-12\">\n          <h3>Donation Progress Over Time</h3>\n          <div class=\"chart-area\">\n            <line-chart\n              style=\"height: 100%\"\n              chart-id=\"green-line-chart\"\n              :chart-data=\"greenLineChart.chartData\"\n              :gradient-stops=\"greenLineChart.gradientStops\"\n              :extra-options=\"greenLineChart.extraOptions\"\n            >\n            </line-chart>\n          </div>\n        </div>\n      </div>\n\n      <!-- NFT Generator -->\n      <div class=\"row mt-5\">\n        <div class=\"col-12\">\n          <h3>Generate an NFT</h3>\n          <nft-generator></nft-generator>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n  \n\n<script>\nimport LineChart from \"@/components/Charts/LineChart\";\nimport * as chartConfigs from \"@/components/Charts/config\";\nimport config from \"@/config\";\nimport { ref, onMounted } from \"vue\";\nimport { ethers } from \"ethers\";\nimport { Campaign, NFTBadge } from \"@/config\";\nimport NFTGenerator from \"@/components/NFTGenerator.vue\";\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\nexport default {\n  components: {\n    LineChart,\n    'nft-generator': NFTGenerator,\n  },\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      donationAmount: \"\",\n      ipfsHash: \"\",\n      errorMessage: \"\",\n      uploadMessage: \"\",\n      defaultProvider: null,\n      ipfsContract: null,\n      campaign: {\n        id: 1,\n        name: \"Save the Rainforest\",\n        description: \"Help us save the Amazon rainforest by funding reforestation projects.\",\n        dollarsNeeded: 500000,\n        dollarsFunded: 120000,\n        image: \"https://placehold.co/600x400/EEE/31343C\",\n        viewedLastHour: 90,\n      },\n      greenLineChart: {\n        extraOptions: chartConfigs.greenChartOptions,\n        chartData: {\n          labels: [\"Day 1\", \"Day 2\", \"Day 3\", \"Day 4\", \"Day 5\"],\n          datasets: [\n            {\n              label: \"Donations (in USD)\",\n              fill: true,\n              borderColor: config.colors.primary,\n              borderWidth: 2,\n              borderDash: [],\n              borderDashOffset: 0.0,\n              pointBackgroundColor: config.colors.primary,\n              pointBorderColor: \"rgba(255,255,255,0)\",\n              pointHoverBackgroundColor: config.colors.primary,\n              pointBorderWidth: 20,\n              pointHoverRadius: 4,\n              pointHoverBorderWidth: 15,\n              pointRadius: 4,\n              data: [80, 100, 70, 80, 120, 80],\n            },\n          ],\n        },\n        gradientColors: [\n          \"rgba(66,134,121,0.15)\",\n          \"rgba(66,134,121,0.0)\",\n          \"rgba(66,134,121,0)\",\n        ],\n        gradientStops: [1, 0.4, 0],\n      },\n    };\n  },\n  computed: {\n    progressPercentage() {\n      return ((this.campaign.dollarsFunded / this.campaign.dollarsNeeded) * 100).toFixed(2);\n    },\n  },\n  created() {\n  this.defaultProvider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\"); // Local Hardhat node\n\n  // Initialize contracts\n    this.campaignContract = new ethers.Contract(\n      Campaign.address,\n      Campaign.abi,\n      this.defaultProvider\n    );\n    this.nftBadgeContract = new ethers.Contract(\n      NFTBadge.address,\n      NFTBadge.abi,\n      this.defaultProvider\n    );\n\n    this.setupBadgeMintedListener();\n  },\n  methods: {\n    async readFile() {\n      const signer = await this.defaultProvider.getSigner();\n      const file = await this.ipfsContract.userFiles(signer.getAddress());\n      if (file !== ZERO_ADDRESS) {\n        this.ipfsHash = file;\n      }\n      return true;\n    },\n    async setFileIPFS(hash) {\n      const ipfsWithSigner = this.ipfsContract.connect(\n        this.defaultProvider.getSigner()\n      );\n      const tx = await ipfsWithSigner.setFileIPFS(hash);\n      await tx.wait(); // Ensure the transaction is mined before proceeding\n      this.ipfsHash = hash;\n    },\n    async handleSubmit() {\n      if (this.donationAmount === \"\" || isNaN(this.donationAmount) || this.donationAmount <= 0) {\n        this.errorMessage = \"Please enter a valid donation amount.\";\n        return;\n      }\n\n      this.errorMessage = \"\";\n      this.successMessage = \"Processing your donation...\";\n\n      try {\n        const signer = this.defaultProvider.getSigner();\n        const campaignWithSigner = this.campaignContract.connect(signer);\n\n        // Send contribution\n        const tx = await campaignWithSigner.contribute({\n          value: ethers.utils.parseEther(this.donationAmount.toString()),\n        });\n\n        // Wait for transaction to be mined\n        await tx.wait();\n\n        this.successMessage = \"Donation successful! Waiting for badge generation...\";\n\n        // Listen for the BadgeMinted event\n        this.listenForBadgeMinted(await signer.getAddress());\n      } catch (error) {\n        console.error(\"Error processing donation:\", error);\n        this.errorMessage = \"There was an issue with your donation. Please try again.\";\n      }\n    },\n    listenForBadgeMinted(recipientAddress) {\n      this.nftBadgeContract.on(\"BadgeMinted\", async (badgeId, recipient, tierIndex) => {\n        if (recipient.toLowerCase() === recipientAddress.toLowerCase()) {\n          this.successMessage = `Badge minted successfully! Badge ID: ${badgeId}`;\n        }\n      });\n    },\n    async generateNFT(tokenURI) {\n      try {\n        const response = await fetch(tokenURI);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch metadata from ${tokenURI}`);\n        }\n\n        const metadata = await response.json();\n\n        // Render or use metadata to display the NFT image\n        console.log(\"NFT Metadata:\", metadata);\n        this.successMessage = `NFT generated successfully! View your NFT at ${tokenURI}`;\n      } catch (error) {\n        console.error(\"Error generating NFT:\", error);\n        this.errorMessage = `Failed to generate NFT: ${error.message}`;\n      }\n    },\n  }\n};\n\n</script>\n\n<style scoped>\n.campaign-title {\n  font-size: 2rem;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n}\n.campaign-description {\n  font-size: 1.25rem;\n  color: #6c757d;\n}\n.img-fluid {\n  max-width: 100%;\n  height: auto;\n}\n.campaign-info {\n  font-size: 1.1rem;\n}\n.progress-bar {\n  background-color: #4caf50;\n}\n.chart-area {\n  height: 400px;\n}\n</style>\n"],"mappings":"AA8FA,OAAAA,SAAA;AACA,YAAAC,YAAA;AACA,OAAAC,MAAA;AACA,SAAAC,GAAA,EAAAC,SAAA;AACA,SAAAC,MAAA;AACA,SAAAC,QAAA,EAAAC,QAAA;AACA,OAAAC,YAAA;AAEA,MAAAC,YAAA;AAEA;EACAC,UAAA;IACAV,SAAA;IACA,iBAAAQ;EACA;EACAG,KAAA;IACAC,EAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,cAAA;MACAC,QAAA;MACAC,YAAA;MACAC,aAAA;MACAC,eAAA;MACAC,YAAA;MACAC,QAAA;QACAX,EAAA;QACAY,IAAA;QACAC,WAAA;QACAC,aAAA;QACAC,aAAA;QACAC,KAAA;QACAC,cAAA;MACA;MACAC,cAAA;QACAC,YAAA,EAAA9B,YAAA,CAAA+B,iBAAA;QACAC,SAAA;UACAC,MAAA;UACAC,QAAA,GACA;YACAC,KAAA;YACAC,IAAA;YACAC,WAAA,EAAApC,MAAA,CAAAqC,MAAA,CAAAC,OAAA;YACAC,WAAA;YACAC,UAAA;YACAC,gBAAA;YACAC,oBAAA,EAAA1C,MAAA,CAAAqC,MAAA,CAAAC,OAAA;YACAK,gBAAA;YACAC,yBAAA,EAAA5C,MAAA,CAAAqC,MAAA,CAAAC,OAAA;YACAO,gBAAA;YACAC,gBAAA;YACAC,qBAAA;YACAC,WAAA;YACAlC,IAAA;UACA;QAEA;QACAmC,cAAA,GACA,yBACA,wBACA,qBACA;QACAC,aAAA;MACA;IACA;EACA;EACAC,QAAA;IACAC,mBAAA;MACA,aAAA/B,QAAA,CAAAI,aAAA,QAAAJ,QAAA,CAAAG,aAAA,QAAA6B,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAnC,eAAA,OAAAhB,MAAA,CAAAoD,SAAA,CAAAC,eAAA;;IAEA;IACA,KAAAC,gBAAA,OAAAtD,MAAA,CAAAuD,QAAA,CACAtD,QAAA,CAAAuD,OAAA,EACAvD,QAAA,CAAAwD,GAAA,EACA,KAAAzC,eACA;IACA,KAAA0C,gBAAA,OAAA1D,MAAA,CAAAuD,QAAA,CACArD,QAAA,CAAAsD,OAAA,EACAtD,QAAA,CAAAuD,GAAA,EACA,KAAAzC,eACA;IAEA,KAAA2C,wBAAA;EACA;EACAC,OAAA;IACA,MAAAC,SAAA;MACA,MAAAC,MAAA,cAAA9C,eAAA,CAAA+C,SAAA;MACA,MAAAC,IAAA,cAAA/C,YAAA,CAAAgD,SAAA,CAAAH,MAAA,CAAAI,UAAA;MACA,IAAAF,IAAA,KAAA5D,YAAA;QACA,KAAAS,QAAA,GAAAmD,IAAA;MACA;MACA;IACA;IACA,MAAAG,YAAAC,IAAA;MACA,MAAAC,cAAA,QAAApD,YAAA,CAAAqD,OAAA,CACA,KAAAtD,eAAA,CAAA+C,SAAA,EACA;MACA,MAAAQ,EAAA,SAAAF,cAAA,CAAAF,WAAA,CAAAC,IAAA;MACA,MAAAG,EAAA,CAAAC,IAAA;MACA,KAAA3D,QAAA,GAAAuD,IAAA;IACA;IACA,MAAAK,aAAA;MACA,SAAA7D,cAAA,WAAA8D,KAAA,MAAA9D,cAAA,UAAAA,cAAA;QACA,KAAAE,YAAA;QACA;MACA;MAEA,KAAAA,YAAA;MACA,KAAA6D,cAAA;MAEA;QACA,MAAAb,MAAA,QAAA9C,eAAA,CAAA+C,SAAA;QACA,MAAAa,kBAAA,QAAAtB,gBAAA,CAAAgB,OAAA,CAAAR,MAAA;;QAEA;QACA,MAAAS,EAAA,SAAAK,kBAAA,CAAAC,UAAA;UACAC,KAAA,EAAA9E,MAAA,CAAA+E,KAAA,CAAAC,UAAA,MAAApE,cAAA,CAAAqE,QAAA;QACA;;QAEA;QACA,MAAAV,EAAA,CAAAC,IAAA;QAEA,KAAAG,cAAA;;QAEA;QACA,KAAAO,oBAAA,OAAApB,MAAA,CAAAI,UAAA;MACA,SAAAiB,KAAA;QACAC,OAAA,CAAAD,KAAA,+BAAAA,KAAA;QACA,KAAArE,YAAA;MACA;IACA;IACAoE,qBAAAG,gBAAA;MACA,KAAA3B,gBAAA,CAAA4B,EAAA,uBAAAC,OAAA,EAAAC,SAAA,EAAAC,SAAA;QACA,IAAAD,SAAA,CAAAE,WAAA,OAAAL,gBAAA,CAAAK,WAAA;UACA,KAAAf,cAAA,2CAAAY,OAAA;QACA;MACA;IACA;IACA,MAAAI,YAAAC,QAAA;MACA;QACA,MAAAC,QAAA,SAAAC,KAAA,CAAAF,QAAA;QACA,KAAAC,QAAA,CAAAE,EAAA;UACA,UAAAC,KAAA,kCAAAJ,QAAA;QACA;QAEA,MAAAK,QAAA,SAAAJ,QAAA,CAAAK,IAAA;;QAEA;QACAd,OAAA,CAAAe,GAAA,kBAAAF,QAAA;QACA,KAAAtB,cAAA,mDAAAiB,QAAA;MACA,SAAAT,KAAA;QACAC,OAAA,CAAAD,KAAA,0BAAAA,KAAA;QACA,KAAArE,YAAA,8BAAAqE,KAAA,CAAAiB,OAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}